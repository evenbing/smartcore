<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartCore.WebApi</name>
    </assembly>
    <members>
        <member name="T:SmartCore.WebApi.AutofacComponent">
            <summary>
            
            </summary>
        </member>
        <member name="F:SmartCore.WebApi.AutofacComponent.container">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.AutofacComponent.InitAutoFac(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册组件
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:SmartCore.WebApi.AutofacComponent.GetService``1">
            <summary>
            从容器中获取对象(Single)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SmartCore.WebApi.AutofacComponent.GetScopeService``1">
            <summary>
            获取服务(请求生命周期内)
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Controllers.AuthController">
            <summary>
            认证及会话
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.AuthController.Logout">
            <summary>
            用户退出登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.AuthController.GetVerifyCode">
            <summary>
            获取登录验证码
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.AuthController.NoPermission">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.AuthController.GetAuth">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.AuthController.CheckAccount(System.String,System.String,System.String@)">
            <summary>
            模拟登陆校验，因为是模拟，所以逻辑很‘模拟’
            </summary>
            <param name="userName"></param>
            <param name="pwd"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Controllers.FileUploadController">
            <summary>
            附件上传
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.FileUploadController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.FileUploadController.FormSingleFileUpload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Form表单之单文件上传
            </summary>
            <param name="formFile">form表单文件流信息</param>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Controllers.HeathController">
            <summary>
            健康检查
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.HeathController.Status">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Controllers.System.BaseDataManmentController">
            <summary>
            基础数据
            </summary>
        </member>
        <member name="F:SmartCore.WebApi.Controllers.System.BaseDataManmentController._sysDictServices">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.System.BaseDataManmentController.#ctor(SmartCore.Services.Sys.ISysDictServices)">
            <summary>
            
            </summary>
            <param name="sysDictServices"></param>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.System.BaseDataManmentController.DicList">
            <summary>
            获取数据字典列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Controllers.TokenController">
            <summary>
            令牌
            </summary>
        </member>
        <member name="F:SmartCore.WebApi.Controllers.TokenController._jwtServices">
            <summary>
            Jwt 服务
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.TokenController.#ctor(SmartCore.Services.IJwtServices)">
            <summary>
            
            </summary>
            <param name="jwtServices"></param>
        </member>
        <member name="M:SmartCore.WebApi.Controllers.TokenController.GetRandomToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.BaseApiController">
            <summary>
            
            </summary>
        </member>
        <member name="T:SmartCore.WebApi.UsersController">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="F:SmartCore.WebApi.UsersController._userService">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.UsersController.#ctor(SmartCore.Services.User.IUserService)">
            <summary>
            
            </summary>
            <param name="userService"></param>
        </member>
        <member name="M:SmartCore.WebApi.UsersController.Sign(SmartCore.Models.DTO.UserLoginDTO)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartCore.WebApi.UsersController.ChangPassword(SmartCore.Models.DTO.UserLoginDTO)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:SmartCore.WebApi.Program.CreateHostBuilder(System.String[])">
             <summary>
            WebHost ： 承载Web应用的宿主 创建作为应用宿主的WebHost；WebHostBuilder ：WebHost的构建者；
             </summary>
             <param name="args"></param>
             <remark>.NET CORE 内置一个IOC容器 用第三方IOC容器Autofac替代内置的</remark>
             <returns></returns>
        </member>
        <member name="T:SmartCore.WebApi.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:SmartCore.WebApi.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartCore.WebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container. 这个方法为应用程序添加服务
            </summary>
            <param name="services"></param> 
        </member>
        <member name="M:SmartCore.WebApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.配置HTTP请求管道
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory">日志工厂</param>
        </member>
        <member name="M:SmartCore.WebApi.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
             <summary>
            Autofac IOC设置
             </summary>
             <param name="container"></param>
             <remarks>
             1.依赖注入的目的是为了解耦。
            2.不依赖于具体类，而依赖抽象类或者接口，这叫依赖倒置。
            3.控制反转即IoC(Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。
            Autofac创建类的生命周期
             1、InstancePerDependency 
            对每一个依赖或每一次调用创建一个新的唯一的实例。这也是默认的创建实例的方式。
            官方文档解释：Configure the component so that every dependent component or call to Resolve() gets a new, unique instance(default.)
            2、InstancePerLifetimeScope
            在一个生命周期域中，每一个依赖或调用创建一个单一的共享的实例，且每一个不同的生命周期域，实例是唯一的，不共享的。
            官方文档解释：Configure the component so that every dependent component or call to Resolve() within a single ILifetimeScope gets the same, shared instance.Dependent components in different lifetime scopes will get different instances.
            3、InstancePerMatchingLifetimeScope
            在一个做标识的生命周期域中，每一个依赖或调用创建一个单一的共享的实例。打了标识了的生命周期域中的子标识域中可以共享父级域中的实例。若在整个继承层次中没有找到打标识的生命周期域，则会抛出异常：DependencyResolutionException。
            官方文档解释：Configure the component so that every dependent component or call to Resolve() within a ILifetimeScope tagged with any of the provided tags value gets the same, shared instance. Dependent components in lifetime scopes that are children of the tagged scope will share the parent's instance. If no appropriately tagged scope can be found in the hierarchy an DependencyResolutionException is thrown. 
            4、InstancePerOwned 
            在一个生命周期域中所拥有的实例创建的生命周期中，每一个依赖组件或调用Resolve() 方法创建一个单一的共享的实例，并且子生命周期域共享父生命周期域中的实例。若在继承层级中没有发现合适的拥有子实例的生命周期域，则抛出异常：DependencyResolutionException。
            官方文档解释：Configure the component so that every dependent component or call to Resolve() within a ILifetimeScope created by an owned instance gets the same, shared instance. Dependent components in lifetime scopes that are children of the owned instance scope will share the parent's instance. If no appropriate owned instance scope can be found in the hierarchy an DependencyResolutionException is thrown. 
            5、SingleInstance
            每一次依赖组件或调用Resolve() 方法都会得到一个相同的共享的实例。其实就是单例模式。
            官方文档解释：Configure the component so that every dependent component or call to Resolve() gets the same, shared instance. 
             </remarks>
        </member>
        <member name="P:SmartCore.WebApi.Startup.AutofacContainer">
            <summary>
            添加这个 是为了生成一个 容器 在别的地方使用
            </summary>
        </member>
        <member name="T:WebApi.Controllers.AdminController">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebApi.Controllers.AdminController.GetControllers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApi.Controllers.RedisCacheController">
            <summary>
            缓存操作
            </summary>
        </member>
        <member name="M:WebApi.Controllers.RedisCacheController.GetRedisValue(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Controllers.RedisCacheController.EnqueueItemOn(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApi.Controllers.RedisCacheController.DequeueItem(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
